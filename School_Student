class Student:
    def __init__(self, name: str, surname: str, age: int, _grades=None):
        if _grades is None:
            _grades = []
        self.name = name
        self.surname = surname
        self.age = age
        self.grades = []  # _atrybut prywatny

    def __repr__(self):
        return f'{self.name} {self.surname} - {self.age} yo'

    def __str__(self):
        return f"I'm a student. My name is {name} {surmane}. I am {age} yo"

    def add_grades(self, *grades):
        for grade in grades:
            if 1 <= grade <= 6:
                self.grades.append(grade)
            else:
                raise ValueError(f'Grade {grade} is out of range 1-6')

    def remove_grade(self, idx: int):
        try:
            return self.grades.pop(idx)  # del self.grade(idx)
        except IndexError:
            raise IndexError("Grade index is out of range")



class School:
    def __init__(self, university_name: str, address: str):
        self.university_name = university_name
        self.address = address
        self.students = []

    def add_student(self, new_student: Student):
        if type(new_student) is Student:
            self.students.append(new_student)
        else:
            raise TypeError

    def add_students(self, *new_students: Student):
        are_all_object_students = all(type(student) is Student for student in new_students)
        if not are_all_object_students:
            raise TypeError
        for student in new_students:
            self.add_student(student)
